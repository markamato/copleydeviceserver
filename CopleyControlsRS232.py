#!/usr/bin/env python
# -*- coding:utf-8 -*-


# ############################################################################
#  license :
# ============================================================================
#
#  File :        CopleyControlsRS232.py
#
#  Project :     RareRF
#
# This file is part of Tango device class.
# 
# Tango is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# Tango is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Tango.  If not, see <http://www.gnu.org/licenses/>.
# 
#
#  $Author :      mark.amato$
#
#  $Revision :    $
#
#  $Date :        $
#
#  $HeadUrl :     $
# ============================================================================
#            This file is generated by POGO
#     (Program Obviously used to Generate tango Object)
# ############################################################################

__all__ = ["CopleyControlsRS232", "CopleyControlsRS232Class", "main"]

__docformat__ = 'restructuredtext'

import PyTango
import sys
# Add additional import
#----- PROTECTED REGION ID(CopleyControlsRS232.additionnal_import) ENABLED START -----#
import CopleyRS232
#----- PROTECTED REGION END -----#	//	CopleyControlsRS232.additionnal_import

# Device States Description
# MOVING : Moving
# ON : Device On
# FAULT : Amp is faulted and must be reset.
# ALARM : There is an alarm raised.
# INIT : The amp is initialising.


class CopleyControlsRS232 (PyTango.Device_4Impl):
    """"""
    
    # -------- Add you global variables here --------------------------
    #----- PROTECTED REGION ID(CopleyControlsRS232.global_variables) ENABLED START -----#
    inputPacked = 0
    outputPacked = 0
    trajectoryRegister = 0

    #----- PROTECTED REGION END -----#	//	CopleyControlsRS232.global_variables

    def __init__(self, cl, name):
        PyTango.Device_4Impl.__init__(self,cl,name)
        self.debug_stream("In __init__()")
        self.set_state(PyTango.DevState.INIT)
        CopleyControlsRS232.init_device(self)
        #----- PROTECTED REGION ID(CopleyControlsRS232.__init__) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	CopleyControlsRS232.__init__
        
    def delete_device(self):
        self.debug_stream("In delete_device()")
        #----- PROTECTED REGION ID(CopleyControlsRS232.delete_device) ENABLED START -----#
        self.Copley.StopSerial
        #----- PROTECTED REGION END -----#	//	CopleyControlsRS232.delete_device

    def init_device(self):
        self.debug_stream("In init_device()")
        self.get_device_properties(self.get_device_class())
        self.attr_IN1_read = False
        self.attr_IN10_read = False
        self.attr_IN11_read = False
        self.attr_IN12_read = False
        self.attr_IN2_read = False
        self.attr_IN3_read = False
        self.attr_IN4_read = False
        self.attr_IN5_read = False
        self.attr_IN6_read = False
        self.attr_IN7_read = False
        self.attr_IN8_read = False
        self.attr_IN9_read = False
        self.attr_LoadPosition_read = 0.0
        self.attr_MotorPosition_read = 0.0
        self.attr_OUT1_read = False
        self.attr_OUT2_read = False
        self.attr_OUT3_read = False
        self.attr_OUT4_read = False
        self.attr_eventStatusRegister_read = 0.0
        self.attr_latchingFaultRegister_read = 0.0
        self.attr_homing_read = False
        self.attr_homingError_read = False
        self.attr_inMotion_read = False
        self.attr_outputMask_read = 0
        self.attr_referencedHomed_read = False
        self.attr_writeEnabled_read = False
        #----- PROTECTED REGION ID(CopleyControlsRS232.init_device) ENABLED START -----#
        self.Copley = CopleyRS232.CopleyRS232()
        self.Copley.StartSerial()        
        self.set_state(PyTango.DevState.ON)
        #----- PROTECTED REGION END -----#	//	CopleyControlsRS232.init_device

    def always_executed_hook(self):
        self.debug_stream("In always_excuted_hook()")
        #----- PROTECTED REGION ID(CopleyControlsRS232.always_executed_hook) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	CopleyControlsRS232.always_executed_hook

    # -------------------------------------------------------------------------
    #    CopleyControlsRS232 read/write attribute methods
    # -------------------------------------------------------------------------
    
    def read_IN1(self, attr):
        self.debug_stream("In read_IN1()")
        #----- PROTECTED REGION ID(CopleyControlsRS232.IN1_read) ENABLED START -----#
		# Reads the input params, stuffs it to the class var, then unpacks the bit specific to bit1
        response = self.Copley.Get(self.Copley.ram,self.Copley.param_inputs_ID)
        self.inputPacked = long(response[2:len(response)])
        self.attr_IN1_read = self.UnpackArrayToBool(int(self.inputPacked),1)
        attr.set_value(self.attr_IN1_read)
        
        #----- PROTECTED REGION END -----#	//	CopleyControlsRS232.IN1_read
        
    def read_IN10(self, attr):
        self.debug_stream("In read_IN10()")
        #----- PROTECTED REGION ID(CopleyControlsRS232.IN10_read) ENABLED START -----#
        self.attr_IN10_read = self.UnpackArrayToBool(self.inputPacked,10)
        attr.set_value(self.attr_IN10_read)
        
        #----- PROTECTED REGION END -----#	//	CopleyControlsRS232.IN10_read
        
    def read_IN11(self, attr):
        self.debug_stream("In read_IN11()")
        #----- PROTECTED REGION ID(CopleyControlsRS232.IN11_read) ENABLED START -----#
        self.attr_IN11_read = self.UnpackArrayToBool(self.inputPacked,11)
        attr.set_value(self.attr_IN11_read)
        
        #----- PROTECTED REGION END -----#	//	CopleyControlsRS232.IN11_read
        
    def read_IN12(self, attr):
        self.debug_stream("In read_IN12()")
        #----- PROTECTED REGION ID(CopleyControlsRS232.IN12_read) ENABLED START -----#
        self.attr_IN12_read = self.UnpackArrayToBool(self.inputPacked,12)
        attr.set_value(self.attr_IN12_read)
        
        #----- PROTECTED REGION END -----#	//	CopleyControlsRS232.IN12_read
        
    def read_IN2(self, attr):
        self.debug_stream("In read_IN2()")
        #----- PROTECTED REGION ID(CopleyControlsRS232.IN2_read) ENABLED START -----#
        self.attr_IN2_read = self.UnpackArrayToBool(self.inputPacked,2)
        attr.set_value(self.attr_IN2_read)
        
        #----- PROTECTED REGION END -----#	//	CopleyControlsRS232.IN2_read
        
    def read_IN3(self, attr):
        self.debug_stream("In read_IN3()")
        #----- PROTECTED REGION ID(CopleyControlsRS232.IN3_read) ENABLED START -----#
        self.attr_IN3_read = self.UnpackArrayToBool(self.inputPacked,3)
        attr.set_value(self.attr_IN3_read)
        
        #----- PROTECTED REGION END -----#	//	CopleyControlsRS232.IN3_read
        
    def read_IN4(self, attr):
        self.debug_stream("In read_IN4()")
        #----- PROTECTED REGION ID(CopleyControlsRS232.IN4_read) ENABLED START -----#
        self.attr_IN4_read = self.UnpackArrayToBool(self.inputPacked,4)
        attr.set_value(self.attr_IN4_read)
        
        #----- PROTECTED REGION END -----#	//	CopleyControlsRS232.IN4_read
        
    def read_IN5(self, attr):
        self.debug_stream("In read_IN5()")
        #----- PROTECTED REGION ID(CopleyControlsRS232.IN5_read) ENABLED START -----#
        self.attr_IN5_read = self.UnpackArrayToBool(self.inputPacked,5)
        attr.set_value(self.attr_IN5_read)
        
        #----- PROTECTED REGION END -----#	//	CopleyControlsRS232.IN5_read
        
    def read_IN6(self, attr):
        self.debug_stream("In read_IN6()")
        #----- PROTECTED REGION ID(CopleyControlsRS232.IN6_read) ENABLED START -----#
        self.attr_IN6_read = self.UnpackArrayToBool(self.inputPacked,6)
        attr.set_value(self.attr_IN6_read)
        
        #----- PROTECTED REGION END -----#	//	CopleyControlsRS232.IN6_read
        
    def read_IN7(self, attr):
        self.debug_stream("In read_IN7()")
        #----- PROTECTED REGION ID(CopleyControlsRS232.IN7_read) ENABLED START -----#
        self.attr_IN7_read = self.UnpackArrayToBool(self.inputPacked,7)
        attr.set_value(self.attr_IN7_read)
        
        #----- PROTECTED REGION END -----#	//	CopleyControlsRS232.IN7_read
        
    def read_IN8(self, attr):
        self.debug_stream("In read_IN8()")
        #----- PROTECTED REGION ID(CopleyControlsRS232.IN8_read) ENABLED START -----#
        self.attr_IN8_read = self.UnpackArrayToBool(self.inputPacked,8)
        attr.set_value(self.attr_IN8_read)
        
        #----- PROTECTED REGION END -----#	//	CopleyControlsRS232.IN8_read
        
    def read_IN9(self, attr):
        self.debug_stream("In read_IN9()")
        #----- PROTECTED REGION ID(CopleyControlsRS232.IN9_read) ENABLED START -----#
        self.attr_IN9_read = self.UnpackArrayToBool(self.inputPacked,9)
        attr.set_value(self.attr_IN9_read)
        
        #----- PROTECTED REGION END -----#	//	CopleyControlsRS232.IN9_read
        
    def read_LoadPosition(self, attr):
        self.debug_stream("In read_LoadPosition()")
        #----- PROTECTED REGION ID(CopleyControlsRS232.LoadPosition_read) ENABLED START -----#
        response = self.Copley.Get(self.Copley.ram,self.Copley.param_load_position_ID)
        self.attr_LoadPosition_read = float(response[2:len(response)])
        attr.set_value(self.attr_LoadPosition_read)
        
        #----- PROTECTED REGION END -----#	//	CopleyControlsRS232.LoadPosition_read
        
    def read_MotorPosition(self, attr):
        self.debug_stream("In read_MotorPosition()")
        #----- PROTECTED REGION ID(CopleyControlsRS232.MotorPosition_read) ENABLED START -----#
        response = self.Copley.Get(self.Copley.ram,self.Copley.param_motor_position_ID)
        self.attr_MotorPosition_read = float(response[2:len(response)])
        attr.set_value(self.attr_MotorPosition_read)
        
        #----- PROTECTED REGION END -----#	//	CopleyControlsRS232.MotorPosition_read
        
    def read_OUT1(self, attr):
        self.debug_stream("In read_OUT1()")
        #----- PROTECTED REGION ID(CopleyControlsRS232.OUT1_read) ENABLED START -----#
        response = self.Copley.Get(self.Copley.ram,self.Copley.param_outputs_ID)
        self.outputPacked = long(response[2:len(response)])
        self.attr_OUT1_read = self.UnpackArrayToBool(self.outputPacked,1)
        attr.set_value(self.attr_OUT1_read)
        #----- PROTECTED REGION END -----#	//	CopleyControlsRS232.OUT1_read
        
    def write_OUT1(self, attr):
        self.debug_stream("In write_OUT1()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(CopleyControlsRS232.OUT1_write) ENABLED START -----#
        if (self.attr_writeEnabled_read) & self.UnpackArrayToBool(self.attr_outputMask_read,1):
            if data == True:
                self.outputPacked = self.outputPacked | 1
            elif self.UnpackArrayToBool(self.outputPacked,1):
                self.outputPacked = self.outputPacked - 1
            
            response = self.Copley.Set(self.Copley.ram,self.Copley.param_outputs_ID,self.outputPacked)                
        #----- PROTECTED REGION END -----#	//	CopleyControlsRS232.OUT1_write
        
    def read_OUT2(self, attr):
        self.debug_stream("In read_OUT2()")
        #----- PROTECTED REGION ID(CopleyControlsRS232.OUT2_read) ENABLED START -----#
        self.attr_OUT2_read = self.UnpackArrayToBool(self.outputPacked,2)
        attr.set_value(self.attr_OUT2_read)
        
        #----- PROTECTED REGION END -----#	//	CopleyControlsRS232.OUT2_read
        
    def write_OUT2(self, attr):
        self.debug_stream("In write_OUT2()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(CopleyControlsRS232.OUT2_write) ENABLED START -----#
        if (self.attr_writeEnabled_read) & self.UnpackArrayToBool(self.attr_outputMask_read,2):        
            if data == True:
                self.outputPacked = self.outputPacked | 2
            elif self.UnpackArrayToBool(self.outputPacked,2):
                self.outputPacked = self.outputPacked - 2
                
                
                ## nothing to do, was already false
            
            response = self.Copley.Set(self.Copley.ram,self.Copley.param_outputs_ID,self.outputPacked)      
        #----- PROTECTED REGION END -----#	//	CopleyControlsRS232.OUT2_write
        
    def read_OUT3(self, attr):
        self.debug_stream("In read_OUT3()")
        #----- PROTECTED REGION ID(CopleyControlsRS232.OUT3_read) ENABLED START -----#
        self.attr_OUT3_read = self.UnpackArrayToBool(self.outputPacked,3)
        attr.set_value(self.attr_OUT3_read)
        
        #----- PROTECTED REGION END -----#	//	CopleyControlsRS232.OUT3_read
        
    def write_OUT3(self, attr):
        self.debug_stream("In write_OUT3()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(CopleyControlsRS232.OUT3_write) ENABLED START -----#
        if (self.attr_writeEnabled_read) & self.UnpackArrayToBool(self.attr_outputMask_read,3):
            if data == True:
                self.outputPacked = self.outputPacked | 4
            elif self.UnpackArrayToBool(self.outputPacked,3):
                self.outputPacked = self.outputPacked - 4
                ## nothing to do, was already false
            
            response = self.Copley.Set(self.Copley.ram,self.Copley.param_outputs_ID,self.outputPacked)        
        #----- PROTECTED REGION END -----#	//	CopleyControlsRS232.OUT3_write
        
    def read_OUT4(self, attr):
        self.debug_stream("In read_OUT4()")
        #----- PROTECTED REGION ID(CopleyControlsRS232.OUT4_read) ENABLED START -----#
        self.attr_OUT4_read = self.UnpackArrayToBool(self.outputPacked,4)
        attr.set_value(self.attr_OUT4_read)
        
        #----- PROTECTED REGION END -----#	//	CopleyControlsRS232.OUT4_read
        
    def write_OUT4(self, attr):
        self.debug_stream("In write_OUT4()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(CopleyControlsRS232.OUT4_write) ENABLED START -----#
        if (self.attr_writeEnabled_read) & self.UnpackArrayToBool(self.attr_outputMask_read,4):
            if data == True:
                self.outputPacked = self.outputPacked | 8
            elif self.UnpackArrayToBool(self.outputPacked,4):
                self.outputPacked = self.outputPacked - 8
                
                ## nothing to do, was already false
            
            response = self.Copley.Set(self.Copley.ram,self.Copley.param_outputs_ID,self.outputPacked)           
        #----- PROTECTED REGION END -----#	//	CopleyControlsRS232.OUT4_write
        
    def read_eventStatusRegister(self, attr):
        self.debug_stream("In read_eventStatusRegister()")
        #----- PROTECTED REGION ID(CopleyControlsRS232.eventStatusRegister_read) ENABLED START -----#
        response = self.Copley.Get(self.Copley.ram,self.Copley.param_statusRegister_ID)
        self.attr_eventStatusRegister_read = float(response[2:len(response)])
        attr.set_value(self.attr_eventStatusRegister_read)
        
        #----- PROTECTED REGION END -----#	//	CopleyControlsRS232.eventStatusRegister_read
        
    def read_latchingFaultRegister(self, attr):
        self.debug_stream("In read_latchingFaultRegister()")
        #----- PROTECTED REGION ID(CopleyControlsRS232.latchingFaultRegister_read) ENABLED START -----#
        response = self.Copley.Get(self.Copley.ram,self.Copley.param_faultRegister_ID)
        #TODO: set state to Error if greater than 0
        self.attr_latchingFaultRegister_read = float(response[2:len(response)])
        attr.set_value(self.attr_latchingFaultRegister_read)
        
        #----- PROTECTED REGION END -----#	//	CopleyControlsRS232.latchingFaultRegister_read
        
    def read_homing(self, attr):
        self.debug_stream("In read_homing()")
        #----- PROTECTED REGION ID(CopleyControlsRS232.homing_read) ENABLED START -----#
        # todo: add the register and set true/false
        response = self.Copley.Get(self.Copley.ram,self.Copley.param_trajectoryRegister_ID)
        trajectoryRegister = float(response[2:len(response)])
        self.attr_homing_read = self.UnpackArrayToBool(trajectoryRegister,14)
        attr.set_value(self.attr_homing_read)
        
        #----- PROTECTED REGION END -----#	//	CopleyControlsRS232.homing_read
        
    def read_homingError(self, attr):
        self.debug_stream("In read_homingError()")
        #----- PROTECTED REGION ID(CopleyControlsRS232.homingError_read) ENABLED START -----#
        #print 'homingError'
        self.attr_homingError_read = self.UnpackArrayToBool(trajectoryRegister,12)
        attr.set_value(self.attr_homingError_read)
        
        #----- PROTECTED REGION END -----#	//	CopleyControlsRS232.homingError_read
        
    def read_inMotion(self, attr):
        self.debug_stream("In read_inMotion()")
        #----- PROTECTED REGION ID(CopleyControlsRS232.inMotion_read) ENABLED START -----#
        self_attr_inMotion_read = self.UnpackArrayToBool(trajectoryRegister,16)
        if self_attr_inMotion_read == True :
            self.set_state(PyTango.DevState.MOVING)
        else :
            self.set_state(PyTango.DevState.ON)
        
        attr.set_value(self.attr_inMotion_read)
        
        #----- PROTECTED REGION END -----#	//	CopleyControlsRS232.inMotion_read
        
    def read_outputMask(self, attr):
        self.debug_stream("In read_outputMask()")
        #----- PROTECTED REGION ID(CopleyControlsRS232.outputMask_read) ENABLED START -----#
        attr.set_value(self.attr_outputMask_read)
        
        #----- PROTECTED REGION END -----#	//	CopleyControlsRS232.outputMask_read
        
    def write_outputMask(self, attr):
        self.debug_stream("In write_outputMask()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(CopleyControlsRS232.outputMask_write) ENABLED START -----#
        self.attr_outputMask_read = data
        #----- PROTECTED REGION END -----#	//	CopleyControlsRS232.outputMask_write
        
    def read_referencedHomed(self, attr):
        self.debug_stream("In read_referencedHomed()")
        #----- PROTECTED REGION ID(CopleyControlsRS232.referencedHomed_read) ENABLED START -----#
        self.attr_referencedHomed_read = self.UnpackArrayToBool(trajectoryRegister,13)
        attr.set_value(self.attr_referencedHomed_read)
        
        #----- PROTECTED REGION END -----#	//	CopleyControlsRS232.referencedHomed_read
        
    def read_writeEnabled(self, attr):
        self.debug_stream("In read_writeEnabled()")
        #----- PROTECTED REGION ID(CopleyControlsRS232.writeEnabled_read) ENABLED START -----#
        attr.set_value(self.attr_writeEnabled_read)
        
        #----- PROTECTED REGION END -----#	//	CopleyControlsRS232.writeEnabled_read
        
    def write_writeEnabled(self, attr):
        self.debug_stream("In write_writeEnabled()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(CopleyControlsRS232.writeEnabled_write) ENABLED START -----#
        self.attr_writeEnabled_read= data
        #----- PROTECTED REGION END -----#	//	CopleyControlsRS232.writeEnabled_write
        
    
    
            
    def read_attr_hardware(self, data):
        self.debug_stream("In read_attr_hardware()")
        #----- PROTECTED REGION ID(CopleyControlsRS232.read_attr_hardware) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	CopleyControlsRS232.read_attr_hardware


    # -------------------------------------------------------------------------
    #    CopleyControlsRS232 command methods
    # -------------------------------------------------------------------------
    
    def ClearError(self):
        """ Attempts to clear errors.
        """
        self.debug_stream("In ClearError()")
        #----- PROTECTED REGION ID(CopleyControlsRS232.ClearError) ENABLED START -----#
        print 'Resetting!'
        self.Copley.Reset()
        self.Copley.StopSerial()
        self.Copley.StartSerial()      
        self.set_state(PyTango.DevState.ON)
        #----- PROTECTED REGION END -----#	//	CopleyControlsRS232.ClearError
        
    def Home(self):
        """ Initiates a homing move.
        """
        self.debug_stream("In Home()")
        #----- PROTECTED REGION ID(CopleyControlsRS232.Home) ENABLED START -----#
        print 'Homing!'
        
        self.Copley.Trajectory(self.Copley.param_trajectory_home)
        
        #----- PROTECTED REGION END -----#	//	CopleyControlsRS232.Home
        
    def SendSerial(self, argin):
        """ Allows direct communication with the serial port.
        :param argin: 
        :type argin: PyTango.DevString
        :rtype: PyTango.DevString
        """
        self.debug_stream("In SendSerial()")
        argout = ""
        #----- PROTECTED REGION ID(CopleyControlsRS232.SendSerial) ENABLED START -----#
        self.Copley.CopleySerial.write((argin)+"\r")
        argout = self.Copley.CopleySerial.read_until('\r')
        #----- PROTECTED REGION END -----#	//	CopleyControlsRS232.SendSerial
        return argout
        
    def SetParams(self):
        """ Sends all applicable parameters to the amp.
        """
        self.debug_stream("In SetParams()")
        #----- PROTECTED REGION ID(CopleyControlsRS232.SetParams) ENABLED START -----#
        
        # TODO: add params to send
        
        #----- PROTECTED REGION END -----#	//	CopleyControlsRS232.SetParams
        
    def StartAbsPositionMove(self, argin):
        """ Triggers a position move in absolute mode.
        :param argin: 
        :type argin: PyTango.DevDouble
        :rtype: PyTango.DevString
        """
        self.debug_stream("In StartAbsPositionMove()")
        argout = ""
        #----- PROTECTED REGION ID(CopleyControlsRS232.StartAbsPositionMove) ENABLED START -----#
        self.Copley.Set(self.Copley.ram,self.Copley.param_profile_ID,self.Copley.param_profile_absSMove)
        self.Copley.Set(self.Copley.ram,self.Copley.param_position_command_ID,argin)
        argout = self.Copley.Trajectory(self.Copley.param_trajectory_move)
        #----- PROTECTED REGION END -----#	//	CopleyControlsRS232.StartAbsPositionMove
        return argout
        
    def StartRelPositionMove(self, argin):
        """ Triggers a position move in relative mode.
        :param argin: 
        :type argin: PyTango.DevDouble
        :rtype: PyTango.DevString
        """
        self.debug_stream("In StartRelPositionMove()")
        argout = ""
        #----- PROTECTED REGION ID(CopleyControlsRS232.StartRelPositionMove) ENABLED START -----#
        self.Copley.Set(self.Copley.ram,self.Copley.param_profile_ID,self.Copley.param_profile_relSMove)
        self.Copley.Set(self.Copley.ram,self.Copley.param_position_command_ID,argin)
        argout = self.Copley.Trajectory(self.Copley.param_trajectory_move)
        #----- PROTECTED REGION END -----#	//	CopleyControlsRS232.StartRelPositionMove
        return argout
        
    def StartVeloPositionMove(self, argin):
        """ 
        :param argin: 
        :type argin: PyTango.DevLong
        :rtype: PyTango.DevString
        """
        self.debug_stream("In StartVeloPositionMove()")
        argout = ""
        #----- PROTECTED REGION ID(CopleyControlsRS232.StartVeloPositionMove) ENABLED START -----#
        self.Copley.Set(self.Copley.ram,self.Copley.param_profile_ID,self.Copley.param_profile_veloMove)
        self.Copley.Set(self.Copley.ram,self.Copley.param_position_command_ID,argin)
        argout = self.Copley.Trajectory(self.Copley.param_trajectory_move)
        #----- PROTECTED REGION END -----#	//	CopleyControlsRS232.StartVeloPositionMove
        return argout
        
    def StopMotion(self):
        """ Stop any active motion.
        """
        self.debug_stream("In StopMotion()")
        #----- PROTECTED REGION ID(CopleyControlsRS232.StopMotion) ENABLED START -----#
        argout = self.Copley.Trajectory(self.Copley.param_trajectory_stop)
        #----- PROTECTED REGION END -----#	//	CopleyControlsRS232.StopMotion
        

    #----- PROTECTED REGION ID(CopleyControlsRS232.programmer_methods) ENABLED START -----#
    def UnpackArrayToBool(self,data,bit):
		""" Unpacks the bit in question and returns a boolean.  Starts from bit 1 not bit 0.
		"""
		response = long(data) & 2**(bit-1) > (bit-1)
		
		return response


    def PackBoolToarray(self,data,value,bit):
		""" Packs the bit in question and returns a boolean.
		"""

		if response == 1:
			return True
		else:
			return False
    #----- PROTECTED REGION END -----#	//	CopleyControlsRS232.programmer_methods

class CopleyControlsRS232Class(PyTango.DeviceClass):
    # -------- Add you global class variables here --------------------------
    #----- PROTECTED REGION ID(CopleyControlsRS232.global_class_variables) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	CopleyControlsRS232.global_class_variables


    #    Class Properties
    class_property_list = {
        'TrajectoryMode0x24':
            [PyTango.DevLong, 
            "Sets the trajectory mode.",
            [21]],
        'ProfileType0xc8':
            [PyTango.DevDouble, 
            "Sets the profile type. \n\n0 = Absolute move, trapezoidal profile.1 = Absolute move, S-curve profile.256 = Relative move, trapezoidal profile.257 = Relative move, S-curve profile.2 = Velocity move.",
            [1]],
        'MaximumVelocity0xcb':
            [PyTango.DevDouble, 
            "Maximum velocity in .1 counts/second.",
            [] ],
        'MaxAccelRate0xcc':
            [PyTango.DevDouble, 
            "Maximum accel rate.  Units 10 counts/second^2.",
            [10]],
        'MaxDecelRate0xcd':
            [PyTango.DevDouble, 
            "Maximum decel rate.  Units 10 counts/second^2.",
            [10]],
        'MaxJerkRate0xc3':
            [PyTango.DevDouble, 
            "Maximum jerk rate.  Units 100 counts/second^3",
            [400]],
        'AbortDecelRate0xcf':
            [PyTango.DevDouble, 
            "Abort decel rate.  Units 10 counts/sec^2",
            [100]],
        'HomeOffset0xc6':
            [PyTango.DevDouble, 
            "Sets the home offset.",
            [0]],
        }


    #    Device Properties
    device_property_list = {
        }


    #    Command definitions
    cmd_list = {
        'ClearError':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevVoid, "none"]],
        'Home':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevVoid, "none"]],
        'SendSerial':
            [[PyTango.DevString, "none"],
            [PyTango.DevString, "none"]],
        'SetParams':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevVoid, "none"]],
        'StartAbsPositionMove':
            [[PyTango.DevDouble, "none"],
            [PyTango.DevString, "none"]],
        'StartRelPositionMove':
            [[PyTango.DevDouble, "none"],
            [PyTango.DevString, "none"]],
        'StartVeloPositionMove':
            [[PyTango.DevLong, "none"],
            [PyTango.DevString, "none"]],
        'StopMotion':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevVoid, "none"]],
        }


    #    Attribute definitions
    attr_list = {
        'IN1':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ]],
        'IN10':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ]],
        'IN11':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ]],
        'IN12':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ]],
        'IN2':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ]],
        'IN3':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ]],
        'IN4':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ]],
        'IN5':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ]],
        'IN6':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ]],
        'IN7':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ]],
        'IN8':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ]],
        'IN9':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ]],
        'LoadPosition':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'Polling period': "250",
            } ],
        'MotorPosition':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'Polling period': "250",
            } ],
        'OUT1':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ_WRITE]],
        'OUT2':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ_WRITE]],
        'OUT3':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ_WRITE]],
        'OUT4':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ_WRITE]],
        'eventStatusRegister':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ]],
        'latchingFaultRegister':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ]],
        'homing':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ]],
        'homingError':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ]],
        'inMotion':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ]],
        'outputMask':
            [[PyTango.DevUShort,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'description': "Masks the outputs as a byte.  Each bit masks an output: 1 means output is writeable, 0 means output is not.  LSB is OUT1, MSB is OUT8.",
            } ],
        'referencedHomed':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ]],
        'writeEnabled':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'description': "True = writes enabled, False = writes disabled",
            } ],
        }


def main():
    try:
        py = PyTango.Util(sys.argv)
        py.add_class(CopleyControlsRS232Class, CopleyControlsRS232, 'CopleyControlsRS232')
        #----- PROTECTED REGION ID(CopleyControlsRS232.add_classes) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	CopleyControlsRS232.add_classes

        U = PyTango.Util.instance()
        U.server_init()
        U.server_run()

    except PyTango.DevFailed as e:
        print ('-------> Received a DevFailed exception:', e)
    except Exception as e:
        print ('-------> An unforeseen exception occured....', e)

if __name__ == '__main__':
    main()
